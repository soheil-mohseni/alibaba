// Require the core node modules.
import crypto from 'crypto';
import * as passGenerator from 'generate-password';

const hash = (nationalcode) => {
  // var crypto = require("crypto");
  console.log('yeeeeessssss', nationalcode);
  const sult = passGenerator.generate({ length: 7, numbers: true });
  console.log('saaaaaullltttt', sult);
  // I am the value that we will be encrypted and decrypting.
  const input = `0|${nationalcode}|${sult}`;

  // I am the encryption inputs generated and used in the ColdFusion code.
  // --
  // NOTE: Generated using generateSecretKey( "AES", 128 ) and randRange( "SHA1PRNG" ).
  const encryptionKey = 'M3M2djl5JEImRSlIQE1jUQ==';
  const initializationVector = 'WHAyczV2OHkvQj9FKEcrSw==';

  // I am the encrypted input value as generated by ColdFusion's encrypt() method.
  // --
  // NOTE: encrypt( input, key, "AES/CBC/PKCS5Padding", "base64", IV );
  const coldfusionEncryptedValue =
    '73vtXZp/0BQNi2NhTxyfmJLham1tiWoAmP8sNjdIc/CO5A1/PySOgxvFhQugYkaC';

  // ----------------------------------------------------------------------------------- //
  // ----------------------------------------------------------------------------------- //

  // The CipherIV methods must take the inputs as a binary / buffer values.
  const binaryEncryptionKey = new Buffer(encryptionKey, 'base64');
  const binaryIV = new Buffer(initializationVector, 'base64');

  // When creating the cipher in Node, we have to make sure we use the exact same
  // algorithm and inputs that we used in ColdFusion. In this case, we're using the "AES"
  // (Advanced Encryption Standard) with an "CBC" (Cipher Block Chaining) feedback mode
  // and 128-bit key.
  const cipher = crypto.createCipheriv(
    'AES-128-CBC',
    binaryEncryptionKey,
    binaryIV,
  );

  // When encrypting, we're converting the UTF-8 input to base64 output.
  const encryptedInput =
    cipher.update(input, 'utf8', 'base64') + cipher.final('base64');

  // ----------------------------------------------------------------------------------- //
  // ----------------------------------------------------------------------------------- //

  const decipher = crypto.createDecipheriv(
    'AES-128-CBC',
    binaryEncryptionKey,
    binaryIV,
  );

  // When decrypting we're converting the base64 input to UTF-8 output.
  var decryptedInput =
    decipher.update(encryptedInput, 'base64', 'utf8') + decipher.final('utf8');

  // Output the all the values, including an input / output test for ColdFusion and
  // Node.js to see if the encrypted values match.
  console.log('Input:', input);
  console.log('Encrypted Input:', encryptedInput);
  console.log('Decrypted Input:', decryptedInput);

  return encryptedInput;
  // console.log( "Values Match:", ( input === decryptedInput ) );
  // console.log( "ColdFusion / Node Match:", ( coldfusionEncryptedValue === encryptedInput ) );
};

const hashed = hash();
console.log(hashed);

export default hash;
